openapi: "3.0.3"
info:
  description: "This is a sample Pharmacy server. In which the **pharmacist** can add medicines to the database, delete, edit information about them. The **user** can view information about medicines, make a purchase, if the medicines is not available, it can be added to the demand."
  version: "1.0.0"
  title: "Pharmacy server"
  contact:
    email: "diachikvladislav@gmail.com"
servers:
  - url: "http://127.0.0.1:5000/api/1.0.0"
    description: 'Local server'
tags:
  - name: "medicine"
    description: "Everything about medicine."
  - name: "pharmacy"
    description: "Access to medicine database."
  - name: "user"
    description: "Operations about user."
paths:
  /medicine:
    post:
      tags:
        - "medicine"
      summary: "Add a new medicine to the database"
      operationId: "addMedicine"
      responses:
        '200':
          description: "successful operation"
        '405':
          description: "Invalid input"
      security:
        - api_key: []
      requestBody:
        $ref: '#/components/requestBodies/Medicine'
    put:
      tags:
        - "medicine"
      summary: "Update an existing medicine"
      operationId: "updateMedicine"
      responses:
        '400':
          description: "Invalid ID supplied"
        '404':
          description: "Medicine not found"
        '405':
          description: "Validation exception"
      security:
        - api_key: []
      requestBody:
        $ref: '#/components/requestBodies/Medicine'
  /medicine/findByStatus:
    get:
      tags:
      - "medicine"
      summary: "Finds Medicines by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findMedicinesByStatus"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        style: "form"
        explode: true
        schema:
          type: "array"
          items:
            type: "string"
            default: "available"
            enum:
            - "available"
            - "pending"
            - "unavailable"
      responses:
        "200":
          description: "successful operation"
          content:
            application/xml:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Medicine'
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Medicine'
        "400":
          description: "Invalid status value"
          content: {}
      security:
      - pharmacy_auth:
        - "write:medicines"
        - "read:medicines"

  /medicine/{medicineId}:
    get:
      tags:
        - "medicine"
      summary: "Find medicine by ID"
      description: "Returns a single medicine"
      operationId: "getMedicineById"
      parameters:
        - name: "medicineId"
          in: "path"
          description: "ID of medicine to return"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medicine'
            application/xml:
              schema:
                $ref: '#/components/schemas/Medicine'
        '400':
          description: "Invalid ID supplied"
        '404':
          description: "Medicine not found"
      security:
        - api_key: []
    post:
      tags:
        - "medicine"
      summary: "Updates a medicine in the pharmacy with form data"
      operationId: "updateMedicineWithForm"
      parameters:
        - name: "medicineId"
          in: "path"
          description: "ID of medicine that needs to be updated"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        '405':
          description: "Invalid input"
      security:
        - api_key: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: "object"
              properties:
                name:
                  description: "Updated name of the medicine"
                  type: "string"
                status:
                  description: "Updated status of the medicine"
                  type: "string"
                manufacturer:
                  description: "Updated manufacturer of the medicine"
                  type: "string"
  /medicine/demand:
    put:
      tags:
        - "medicine"
      summary: "Add medicine in demand"
      operationId: "addMedicineDemand"
      parameters:
        - name: 'demand'
          in: 'query'
          required: true
          schema:
             type: 'boolean'
             enum:
                - true
      responses:
        '200':
          description: "successful operation"
        '405':
          description: "Invalid input"
      security:
        - pharmacy_auth:
            - 'write:medicines'
            - 'read:medicines'
      requestBody:
        $ref: '#/components/requestBodies/Medicine'

  /pharmacy/inventory:
    get:
      tags:
        - "pharmacy"
      summary: "Returns medicine inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                additionalProperties:
                  type: "integer"
                  format: "int32"
      security:
        - api_key: []
  /pharmacy/order:
    post:
      tags:
        - "pharmacy"
      summary: "Place an order for a medicine"
      operationId: "placeOrder"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: "Invalid Order"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: "order placed for purchasing the medicine"
        required: true
      security:
        - api_key: []
  /pharmacy/order/{orderId}:
    get:
      tags:
        - "pharmacy"
      summary: "Find purchase order by ID"
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      operationId: "getOrderById"
      parameters:
        - name: "orderId"
          in: "path"
          description: "ID of medicine that needs to be fetched"
          required: true
          schema:
            type: "integer"
            format: "int64"
            minimum: 1
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: "Invalid ID supplied"
        '404':
          description: "Order not found"
      security:
        - api_key: []
    delete:
      tags:
        - "pharmacy"
      summary: "Delete purchase order by ID"
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      operationId: "deleteOrder"
      parameters:
        - name: "orderId"
          in: 'path'
          description: 'ID of the order that needs to be deleted'
          required: true
          schema:
            type: 'integer'
            format: 'int64'
            minimum: 1
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Order not found'
      security:
        - api_key: []
  /user:
    post:
      tags:
        - 'user'
      summary: 'Create user'
      description: 'This can only be done by the logged in user.'
      operationId: 'createUser'
      responses:
        default:
          description: 'successful operation'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: 'Created user object'
        required: true
  /user/login:
    get:
      tags:
        - 'user'
      summary: 'Logs user into the system'
      operationId: 'loginUser'
      parameters:
        - name: 'username'
          in: 'query'
          description: 'The user name for login'
          required: true
          schema:
            type: 'string'
        - name: 'password'
          in: 'query'
          description: 'The password for login in clear text'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          description: 'successful operation'
          headers:
            X-Rate-Limit:
              description: 'calls per hour allowed by the user'
              schema:
                type: 'integer'
                format: 'int32'
            X-Expires-After:
              description: 'date in UTC when token expires'
              schema:
                type: 'string'
                format: 'date-time'
          content:
            application/json:
              schema:
                type: 'string'
            application/xml:
              schema:
                type: 'string'
        '400':
          description: 'Invalid username/password supplied'
  /user/logout:
    get:
      tags:
        - 'user'
      summary: 'Logs out current logged in user session'
      operationId: 'logoutUser'
      responses:
        default:
          description: 'successful operation'
  /user/{username}:
    get:
      tags:
        - 'user'
      summary: 'Get user by user name'
      operationId: 'getUserByName'
      parameters:
        - name: 'username'
          in: 'path'
          description: 'The name that needs to be fetched. Use user1 for testing.'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 'Invalid username supplied'
        '404':
          description: 'User not found'
    put:
      tags:
        - 'user'
      summary: 'Updated user'
      description: 'This can only be done by the logged in user.'
      operationId: 'updateUser'
      parameters:
        - name: 'username'
          in: 'path'
          description: 'name that need to be updated'
          required: true
          schema:
            type: 'string'
      responses:
        '400':
          description: 'Invalid user supplied'
        '404':
          description: 'User not found'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: 'Updated user object'
        required: true
    delete:
      tags:
        - 'user'
      summary: 'Delete user'
      description: 'This can only be done by the logged in user.'
      operationId: 'deleteUser'
      parameters:
        - name: 'username'
          in: 'path'
          description: 'The name that needs to be deleted'
          required: true
          schema:
            type: 'string'
      responses:
        '400':
          description: 'Invalid username supplied'
        '404':
          description: 'User not found'
components:
  schemas:
    Order:
      type: "object"
      required:
        - 'userId'
        - 'medicineId'
        - 'quantity'
        - 'shipDate'
        - 'status'
        - 'complete'
      properties:
        id:
          type: "integer"
          format: "int64"
        userId:
          type: "integer"
          format: "int64"
        medicineId:
          type: "integer"
          format: "int64"
        quantity:
          type: "integer"
          format: "int32"
        shipDate:
          type: "string"
          format: "date-time"
        status:
          type: "string"
          description: "Order Status"
          enum:
            - "placed"
            - "approved"
            - "delivered"
        complete:
          type: "boolean"
          default: false
      xml:
        name: "Order"
    Category:
      type: 'object'
      required:
       - 'name'
      properties:
        id:
          type: 'integer'
          format: 'int64'
        name:
          type: 'string'
      xml:
        name: 'Category'
    User:
      type: "object"
      required:
        - "username"
        - "firstName"
        - "lastName"
        - "email"
        - "phone"
        - "password"
      properties:
        id:
          type: "integer"
          format: "int64"
        username:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        phone:
          type: "string"
      xml:
        name: 'User'
    Medicine:
      type: "object"
      required:
        - "name"
        - "status"
        - "manufacturer"
        - "category"
      properties:
        id:
          type: "integer"
          format: "int64"
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: "string"
          example: "Paracetamol"
        manufacturer:
          type: "string"
          example: "DARNITSA"
        status:
          type: "string"
          description: "medicine status in the pharmacy"
          enum:
            - "available"
            - "pending"
            - "unavailable"
        demand:
          type: "boolean"
          default: false
      xml:
        name: "Medicine"
  requestBodies:
    Medicine:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Medicine'
        application/xml:
          schema:
            $ref: '#/components/schemas/Medicine'
      description: "Medicine object that needs to be added to the pharmacy"
      required: true
    UserList:
      content:
        application/json:
          schema:
            type: 'array'
            items:
              $ref: '#/components/schemas/User'
      description: 'List of user object'
      required: true
  securitySchemes:
    # for User
    pharmacy_auth:
      type: 'oauth2'
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:medicines': 'modify medicines in your account'
            'read:medicines': 'read your medicines'
    # for pharmacist
    api_key:
      type: 'apiKey'
      name: 'api_key'
      in: 'header'